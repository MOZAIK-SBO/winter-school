# sint: secret integers
# see also https://mp-spdz.readthedocs.io/en/latest/Compiler.html#Compiler.types.sint


def test(actual, expected):

    # you can reveal a number in order to print it

    actual = actual.reveal()
    print_ln('expected %s, got %s', expected, actual)

# you can assign public numbers to sint

a = sint(1)
b = sint(2)

# some arithmetic works as expected

test(a + b, 3)
test(a * b, 2)
test(a - b, -1)


# comparisons produce 1 for true and 0 for false

# test(a < b, 1)
# test(a <= b, 1)
# test(a >= b, 0)
# test(a > b, 0)
# test(a == b, 0)
# test(a != b, 1)

# arrays and loops work as follows

a = Array(100, sint)

@for_range(100)
def f(i):
    a[i] = sint(i) * sint(i + 1)

test(a[99], 99 * 100)


# sfix: fixed-point numbers
# see also https://mp-spdz.readthedocs.io/en/latest/Compiler.html#Compiler.types.sfix

# set the precision after the dot and in total

sfix.set_precision(16, 31) 

# you can do all basic arithmetic with sfix, including division

a = sfix(2)
b = sfix(-0.1)

test(a + b, 1.9)
test(a - b, 2.1)
test(a * b, -0.2)
# test(a / b, -20)
# test(a < b, 0)
# test(a <= b, 0)
# test(a >= b, 1)
# test(a > b, 1)
# test(a == b, 0)
# test(a != b, 1)

